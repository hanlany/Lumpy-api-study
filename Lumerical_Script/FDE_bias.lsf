switchtolayout;

### Load FDE file
input;
jsonload("input");
filename = common.name;
lambda = common.target_wavelength;
gold_gap = common.gold_gap;
waveguide_width = common.waveguide_width;
topAlGaAs_thickness = common.topAlGaAs_thickness;
load(filename+".lms");
save(filename+"_bias"+".lms");
load(filename+"_bias"+".lms");

### Run findmode with original refractory index
cleardcard;
findmodes;
loaddata("test_mode.ldf");
target_mode_struct = bestoverlap("global_mode8");
neff_struct = getdata(target_mode_struct,"neff");
loss_struct = getdata(target_mode_struct,"loss");
print(" ");
print("Original mode (structure) metrics:");
?"neff: "+num2str(neff_struct);
?"loss: "+num2str(loss_struct);
#visual_E = getresult(target_mode_struct,"E");
#visualize(visual_E);
switchtolayout;

### Load neccessary data from previous precedure 
loaddata("rect_grid.ldf");
loaddata("rect_Ey.ldf");

### Helper functions
function n_given_ey_AlGaAs(n0,Ey){ 
    return 0.5*(n0^3)*(-1.28e-12)*Ey;
}
function n_given_ey_GaAs(n0,Ey){ 
    return 0.5*(n0^3)*(-1.5e-12)*Ey;
}

### Update refractary index via spatial(n,k)
rect_z = [-5e-6;5e-6];
x_size = size(rect_x,1);
y_size = size(rect_y,1);
#n_nk = ones(x_size,y_size,2,3);
#n_nk(:,:,1,1) = rect_nx;
#n_nk(:,:,2,1) = rect_nx;
#n_nk(:,:,1,2) = rect_ny;
#n_nk(:,:,2,2) = rect_ny;
#n_nk(:,:,1,3) = rect_nz;
#n_nk(:,:,2,3) = rect_nz;

#n_nk = n_nk+1;
select("AlGaAs-Bot");
x_min_1 = get("x min");
x_max_1 = get("x max");
y_min_1 = get("y min");
y_max_1 = get("y max");
select("GaAs-Core");
x_min_2 = get("x min");
x_max_2 = get("x max");
y_min_2 = get("y min");
y_max_2 = get("y max");
select("AlGaAs-Top");
x_min_3 = get("x min");
x_max_3 = get("x max");
y_min_3 = get("y min");
y_max_3 = get("y max");
select("Gold-Top");
x_min_4 = get("x min");
x_max_4 = get("x max");
y_min_4 = get("y min");
y_max_4 = get("y max");
select("Gold-Side");
x_min_5 = get("x min");
x_max_5 = get("x max");
y_min_5 = get("y min");
y_max_5 = get("y max");

### Find out size of three nk-materials
nk_1_x_size = 0;
nk_1_y_size = 0;
nk_2_x_size = 0;
nk_2_y_size = 0;
nk_3_x_size = 0;
nk_3_y_size = 0;
rect_x_1 = [0];
rect_y_1 = [0];
rect_x_2 = [0];
rect_y_2 = [0];
rect_x_3 = [0];
rect_y_3 = [0];
for(i=1:y_size){
    if(rect_y(i)>=y_min_1 & rect_y(i)<=y_max_1){
        nk_1_y_size = nk_1_y_size + 1;
        rect_y_1 = [rect_y_1,rect_y(i)];
        if(nk_1_y_size == 1){
            for(j=1:x_size){
                if(rect_x(j)>=x_min_1 & rect_x(j)<=x_max_1){
                    nk_1_x_size = nk_1_x_size + 1;
                    rect_x_1 = [rect_x_1,rect_x(j)];
                }
            }
        }
    } else if(rect_y(i)>=y_min_2 & rect_y(i)<=y_max_2){
        nk_2_y_size = nk_2_y_size + 1;
        rect_y_2 = [rect_y_2,rect_y(i)];
        if(nk_2_y_size == 1){
            for(j=1:x_size){
                if(rect_x(j)>=x_min_2 & rect_x(j)<=x_max_2){
                    nk_2_x_size = nk_2_x_size + 1;
                    rect_x_2 = [rect_x_2,rect_x(j)];
                }
            }
        }
    } else if(rect_y(i)>=y_min_3 & rect_y(i)<=y_max_3){
        nk_3_y_size = nk_3_y_size + 1;
        rect_y_3 = [rect_y_3,rect_y(i)];
        if(nk_3_y_size == 1){
            for(j=1:x_size){
                if(rect_x(j)>=x_min_3 & rect_x(j)<=x_max_3){
                    nk_3_x_size = nk_3_x_size + 1;
                    rect_x_3 = [rect_x_3,rect_x(j)];
                }
            }
        }
    }
}
rect_x_1 = rect_x_1(2:size(rect_x_1,2));
rect_y_1 = rect_y_1(2:size(rect_y_1,2));
rect_x_2 = rect_x_2(2:size(rect_x_2,2));
rect_y_2 = rect_y_2(2:size(rect_y_2,2));
rect_x_3 = rect_x_3(2:size(rect_x_3,2));
rect_y_3 = rect_y_3(2:size(rect_y_3,2));

### Define n for these three nk strutures
n_nk_1 = ones(nk_1_x_size,nk_1_y_size,2,3);
n_nk_2 = ones(nk_2_x_size,nk_2_y_size,2,3);
n_nk_3 = ones(nk_3_x_size,nk_3_y_size,2,3);
nk_1_x_size = 0;
nk_1_y_size = 0;
nk_2_x_size = 0;
nk_2_y_size = 0;
nk_3_x_size = 0;
nk_3_y_size = 0;


### Find n from original structure
for(i=1:y_size){
    if(rect_y(i)>=y_min_1 & rect_y(i)<=y_max_1){
        nk_1_y_size = nk_1_y_size + 1;
        nk_1_x_size = 0;
        for(j=1:x_size){            
            if(rect_x(j)>=x_min_1 & rect_x(j)<=x_max_1){
                nk_1_x_size = nk_1_x_size + 1;
                n_nk_1(nk_1_x_size,nk_1_y_size,1,1) = AlGaAs_index;
                n_nk_1(nk_1_x_size,nk_1_y_size,2,1) = AlGaAs_index;
                n_nk_1(nk_1_x_size,nk_1_y_size,1,2) = AlGaAs_index;
                n_nk_1(nk_1_x_size,nk_1_y_size,2,2) = AlGaAs_index;
                n_nk_1(nk_1_x_size,nk_1_y_size,1,3) = AlGaAs_index;
                n_nk_1(nk_1_x_size,nk_1_y_size,2,3) = AlGaAs_index;
            }
        }
    } else if(rect_y(i)>=y_min_2 & rect_y(i)<=y_max_2){
        nk_2_y_size = nk_2_y_size + 1;
        nk_2_x_size = 0;
        for(j=1:x_size){
            if(rect_x(j)>=x_min_2 & rect_x(j)<=x_max_2){
                nk_2_x_size = nk_2_x_size + 1;
                n_nk_2(nk_2_x_size,nk_2_y_size,1,1) = GaAs_index;
                n_nk_2(nk_2_x_size,nk_2_y_size,2,1) = GaAs_index;
                n_nk_2(nk_2_x_size,nk_2_y_size,1,2) = GaAs_index;
                n_nk_2(nk_2_x_size,nk_2_y_size,2,2) = GaAs_index;
                n_nk_2(nk_2_x_size,nk_2_y_size,1,3) = GaAs_index;
                n_nk_2(nk_2_x_size,nk_2_y_size,2,3) = GaAs_index;
            }
        }
    } else if(rect_y(i)>=y_min_3 & rect_y(i)<=y_max_3){
        nk_3_y_size = nk_3_y_size + 1;
        nk_3_x_size = 0;
        for(j=1:x_size){
            if(rect_x(j)>=x_min_3 & rect_x(j)<=x_max_3){
                nk_3_x_size = nk_3_x_size + 1;
                n_nk_3(nk_3_x_size,nk_3_y_size,1,1) = AlGaAs_index;
                n_nk_3(nk_3_x_size,nk_3_y_size,2,1) = AlGaAs_index;
                n_nk_3(nk_3_x_size,nk_3_y_size,1,2) = AlGaAs_index;
                n_nk_3(nk_3_x_size,nk_3_y_size,2,2) = AlGaAs_index;
                n_nk_3(nk_3_x_size,nk_3_y_size,1,3) = AlGaAs_index;
                n_nk_3(nk_3_x_size,nk_3_y_size,2,3) = AlGaAs_index;
            }
        }
    }
}


# import nk material
addimport;
set("name","nk1_origin");
out=importnk2(n_nk_1,rect_x_1,rect_y_1,rect_z);
addimport;
set("name","nk2_origin");
out=importnk2(n_nk_2,rect_x_2,rect_y_2,rect_z);
addimport;
set("name","nk3_origin");
out=importnk2(n_nk_3,rect_x_3,rect_y_3,rect_z);
save(filename+"_bias"+".lms");
load(filename+"_bias"+".lms");
### Run findmode with original refractory index (nk material)
findmodes;
target_mode_origin = bestoverlap("global_mode8");
neff_origin = getdata(target_mode_origin,"neff");
loss_origin = getdata(target_mode_origin,"loss");
print(" ");
print("Original (nk material) mode metrics:");
?"neff: "+num2str(neff_origin);
?"loss: "+num2str(loss_origin);
#visual_E = getresult(target_mode_origin,"E");
#visualize(visual_E);
switchtolayout;

# Setup n
nk_1_x_size = 0;
nk_1_y_size = 0;
nk_2_x_size = 0;
nk_2_y_size = 0;
nk_3_x_size = 0;
nk_3_y_size = 0;
for(i=1:y_size){
    if(rect_y(i)>=y_min_1 & rect_y(i)<=y_max_1){
        nk_1_y_size = nk_1_y_size + 1;
        nk_1_x_size = 0;
        for(j=1:x_size){            
            if(rect_x(j)>=x_min_1 & rect_x(j)<=x_max_1){
                nk_1_x_size = nk_1_x_size + 1;
                n_nk_1(nk_1_x_size,nk_1_y_size,1,1) = AlGaAs_index+n_given_ey_AlGaAs(AlGaAs_index,rect_Ey(j,i));
                n_nk_1(nk_1_x_size,nk_1_y_size,2,1) = AlGaAs_index+n_given_ey_AlGaAs(AlGaAs_index,rect_Ey(j,i));
                n_nk_1(nk_1_x_size,nk_1_y_size,1,2) = AlGaAs_index;
                n_nk_1(nk_1_x_size,nk_1_y_size,2,2) = AlGaAs_index;
                n_nk_1(nk_1_x_size,nk_1_y_size,1,3) = AlGaAs_index;
                n_nk_1(nk_1_x_size,nk_1_y_size,2,3) = AlGaAs_index;
            }
        }
    } else if(rect_y(i)>=y_min_2 & rect_y(i)<=y_max_2){
        nk_2_y_size = nk_2_y_size + 1;
        nk_2_x_size = 0;
        for(j=1:x_size){
            if(rect_x(j)>=x_min_2 & rect_x(j)<=x_max_2){
                nk_2_x_size = nk_2_x_size + 1;
                n_nk_2(nk_2_x_size,nk_2_y_size,1,1) = GaAs_index+n_given_ey_GaAs(GaAs_index,rect_Ey(j,i));
                n_nk_2(nk_2_x_size,nk_2_y_size,2,1) = GaAs_index+n_given_ey_GaAs(GaAs_index,rect_Ey(j,i));
                n_nk_2(nk_2_x_size,nk_2_y_size,1,2) = GaAs_index;
                n_nk_2(nk_2_x_size,nk_2_y_size,2,2) = GaAs_index;
                n_nk_2(nk_2_x_size,nk_2_y_size,1,3) = GaAs_index;
                n_nk_2(nk_2_x_size,nk_2_y_size,2,3) = GaAs_index;
            }
        }
    } else if(rect_y(i)>=y_min_3 & rect_y(i)<=y_max_3){
        nk_3_y_size = nk_3_y_size + 1;
        nk_3_x_size = 0;
        for(j=1:x_size){
            if(rect_x(j)>=x_min_3 & rect_x(j)<=x_max_3){
                nk_3_x_size = nk_3_x_size + 1;
                n_nk_3(nk_3_x_size,nk_3_y_size,1,1) = AlGaAs_index+n_given_ey_AlGaAs(AlGaAs_index,rect_Ey(j,i));
                n_nk_3(nk_3_x_size,nk_3_y_size,2,1) = AlGaAs_index+n_given_ey_AlGaAs(AlGaAs_index,rect_Ey(j,i));
                n_nk_3(nk_3_x_size,nk_3_y_size,1,2) = AlGaAs_index;
                n_nk_3(nk_3_x_size,nk_3_y_size,2,2) = AlGaAs_index;
                n_nk_3(nk_3_x_size,nk_3_y_size,1,3) = AlGaAs_index;
                n_nk_3(nk_3_x_size,nk_3_y_size,2,3) = AlGaAs_index;
            }
        }
    }
}

## Add import with voltage bias
select("nk1_origin");
set("enabled",0);
select("nk2_origin");
set("enabled",0);
select("nk3_origin");
set("enabled",0);
addimport;
set("name","nk1_bias");
out=importnk2(n_nk_1,rect_x_1,rect_y_1,rect_z);
addimport;
set("name","nk2_bias");
out=importnk2(n_nk_2,rect_x_2,rect_y_2,rect_z);
addimport;
set("name","nk3_bias");
out=importnk2(n_nk_3,rect_x_3,rect_y_3,rect_z);
save(filename+"_bias"+".lms");
load(filename+"_bias"+".lms");

### Run findmode with original refractory index
findmodes;
target_mode_bias = bestoverlap("global_mode8");
neff_bias = getdata(target_mode_bias,"neff");
loss_bias = getdata(target_mode_bias,"loss");
print(" ");
print("Bias (nk material) mode metrics:");
?"neff: "+num2str(neff_bias);
?"loss: "+num2str(loss_bias);
#visual_E = getresult(target_mode_origin,"E");
#visualize(visual_E);

### Print out delta neff
print(" ");
print("Delta neff between origin structure and origin nk-material (0V vs 0V) is:");
?num2str(neff_struct-neff_origin);
print("Delta neff between origin structure and bias nk-material (0V vs 1V) is:");
?num2str(neff_struct-neff_bias);
print("Delta neff between origin nk-material and bias nk-material (0V vs 1V) is:");
?num2str(neff_origin-neff_bias);
#Switch to layout