##############################################
# Script file: AlGaInP_1994_literature_model.lsf
#
# Description:
#    This script creates the material models
#    necessary for this example.
#    It will also reproduce index from the
#    reference paper.
#
# Copyright 2020, Ansys Inc.
##############################################

#Refractive indices measurement of (GaInP)m/(AlInP)n quasi-quaternaries and GaInP/AlInP multiple quantum wells
#Reference: 1994, Yawara Kaneko, Journal of Applied Physics

##########################################################


##########################################################
# this function return complex-valued refractive index
# for the frequencies and composition fraction specified
# Inputs are:
#     x : alloy composition fraction
#     f : frequency in Hz
function n_AlGaInP_Kaneko(x,frequency) {
    
    E = frequency*h/e; #photon energy [eV]
    
    E0 = 4.17 + 0.49*x;
    Ed = 35.79 - 1.16*x;
    Eg = 1.89 + 0.67 *x;       

    n = struct;
    tol = 0.99;
    if(any(find(E/Eg > tol))){
        n.warning = "model is valid for photon energies approaching the direct bandgap (Eg="+num2str(c*h/Eg/e*1e9)+"nm). "+endl+
                    "For energies much above the bandgap make sure it still makes sense to use it.";
        E(find(E/Eg > tol)) = Eg*tol; #limit E to values <= 0.99*Eg (photon energy nearly up to bandgap)
    }
    
    epsilon = 1 + Ed/E0 + Ed*E^2/E0^3 + Ed*E^4/(2*E0^3*(E0^2-Eg^2))*log((2*E0^2-Eg^2-E^2)/(Eg^2-E^2));
    
    n.n = sqrt((abs(epsilon)+real(epsilon))/2);
    n.n = sqrt(real(epsilon));
    return n;
}

function n_Kaneko(material,x,frequency) {
    supported_materials_and_models_list;
    if(material == kaneko_materials{1}){
        return n_AlGaInP_Kaneko(x(1),frequency);
    }else{
        n = struct;
        n.err = material + "::kaneko does not exist";
        n.n = 0;
        return n;
    }
}